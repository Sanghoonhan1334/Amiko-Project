'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { ProfileSkeleton } from '@/components/ui/skeleton'

import { 
  Edit3, 
  Save, 
  X, 
  Gift, 
  Bell, 
  Mail, 
  Settings,
  Heart,
  Calendar,
  MessageSquare,
  User,
  MapPin,
  GraduationCap,
  Briefcase,
  Camera,
  Plus,
  Shield,
  CheckCircle,
  AlertCircle
} from 'lucide-react'
import StorySettings from './StorySettings'
import AnalyticsDashboard from '@/components/admin/AnalyticsDashboard'
import { KoreanUserProfile, LatinUserProfile } from '@/types/user'
import { useLanguage } from '@/context/LanguageContext'
import { useAuth } from '@/context/AuthContext'
// üöÄ ÏµúÏ†ÅÌôî: React Query hooks Ï∂îÍ∞Ä
import { useUserProfile, useUpdateProfile } from '@/hooks/useUserProfile'

// Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Îèô ÏÇ¨Ïö©

export default function MyTab() {
  const { t } = useLanguage()
  const { user, token } = useAuth()
  const router = useRouter()
  const [isEditing, setIsEditing] = useState(false)
  const [editForm, setEditForm] = useState({
    full_name: '',
    korean_name: '',
    spanish_name: '',
    nickname: '',
    phone: '',
    one_line_intro: '',
    introduction: '',
    language: 'ko',
    user_type: 'student',
    university: '',
    major: '',
    grade: '',
    occupation: '',
    company: '',
    career: '',
    interests: [] as string[],
    profile_images: [] as string[]
  })
  const [newInterest, setNewInterest] = useState('')
  const [isSaving, setIsSaving] = useState(false)
  const [profile, setProfile] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [authStatus, setAuthStatus] = useState({ loading: true, smsVerified: false })
  const [verificationStatus, setVerificationStatus] = useState<{
    isVerified: boolean
    status: 'none' | 'email' | 'sms' | 'full'
    message: string
  }>({
    isVerified: false,
    status: 'none',
    message: 'Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§'
  })
  const [notificationSettings, setNotificationSettings] = useState({
    webPush: true,
    email: false,
    marketing: false
  })

  // ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Ïä§ÏôÄÏù¥ÌîÑ ÏÉÅÌÉú
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [startX, setStartX] = useState(0)
  const [isDragging, setIsDragging] = useState(false)
  
  // Î™©ÏóÖ ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÎì§ (Ïã§Ï†úÎ°úÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÖÎ°úÎìúÌïú ÏÇ¨ÏßÑÎì§)
  // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÎäî Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Í∞ÄÏ†∏Ïò¥

  // Ìé∏Ïßë Ìèº Ï¥àÍ∏∞Ìôî
  const initializeEditForm = (profileData: any) => {
    setEditForm({
      full_name: profileData?.name || profileData?.full_name || '',
      korean_name: profileData?.korean_name || '',
      spanish_name: profileData?.spanish_name || '',
      nickname: profileData?.nickname || '',
      phone: profileData?.phone || '',
      one_line_intro: profileData?.bio || profileData?.one_line_intro || '',
      introduction: profileData?.introduction || '',
      language: profileData?.native_language || profileData?.language || 'ko',
      user_type: profileData?.userType || profileData?.user_type || 'student',
      university: profileData?.university || '',
      major: profileData?.major || '',
      grade: profileData?.grade || '',
      occupation: profileData?.occupation || '',
      company: profileData?.company || '',
      career: profileData?.career || '',
      interests: profileData?.interests || [],
      profile_images: profileData?.profileImages?.map((img: any) => img.src) || profileData?.profile_images || []
    })
  }

  // ÌîÑÎ°úÌïÑ Ï†ÄÏû•
  const handleSaveProfile = async () => {
    if (!user || !token) {
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
          return
        }
        
    setIsSaving(true)
    try {
      const response = await fetch('/api/profile', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(editForm)
      })

      if (response.ok) {
        const data = await response.json()
        setProfile(data.user)
        setIsEditing(false)
        alert('ÌîÑÎ°úÌïÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
      } else {
        throw new Error('ÌîÑÎ°úÌïÑ Ï†ÄÏû• Ïã§Ìå®')
      }
    } catch (error) {
      console.error('ÌîÑÎ°úÌïÑ Ï†ÄÏû• Ïò§Î•ò:', error)
      alert('ÌîÑÎ°úÌïÑ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.')
    } finally {
      setIsSaving(false)
    }
  }

  // Í¥ÄÏã¨ÏÇ¨ Ï∂îÍ∞Ä
  const handleAddInterest = () => {
    if (newInterest.trim() && !editForm.interests.includes(newInterest.trim())) {
      setEditForm(prev => ({
        ...prev,
        interests: [...prev.interests, newInterest.trim()]
      }))
      setNewInterest('')
    }
  }

  // Í¥ÄÏã¨ÏÇ¨ Ï†úÍ±∞
  const handleRemoveInterest = (interestToRemove: string) => {
    setEditForm(prev => ({
      ...prev,
      interests: prev.interests.filter(interest => interest !== interestToRemove)
    }))
  }

  // ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadProfile = async () => {
      if (!user) {
        setLoading(false)
        return
      }

      try {
        setLoading(true)
        
        // API Ìò∏Ï∂ú ÏãúÎèÑ (Ïã§Ìå®Ìï¥ÎèÑ Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
        if (token) {
          try {
            const response = await fetch('/api/profile', {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            })

            if (response.ok) {
              const data = await response.json()
              setProfile(data.user || data.profile)
              initializeEditForm(data.user || data.profile)
              setLoading(false)
            return
          }
          } catch (error) {
            console.log('API Ìò∏Ï∂ú Ïã§Ìå®, Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©')
          }
        }
        
        // API Ïã§Ìå® Ïãú Îπà ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï
        setProfile(null)
        initializeEditForm(null)
      } catch (error) {
        console.error('ÌîÑÎ°úÌïÑ Î°úÎìú Ï§ë Ïò§Î•ò:', error)
        // Ïò§Î•ò Ïãú Îπà ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï
        setProfile(null)
        initializeEditForm(null)
      } finally {
        setLoading(false)
      }
    }

    loadProfile()
  }, [user, token])

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
  const checkVerificationStatus = async () => {
    if (!user || !token) {
      setVerificationStatus({
        isVerified: false,
        status: 'none',
        message: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§'
      })
      return
    }

    try {
      const response = await fetch(`/api/verification?userId=${user.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        const verification = data.verification
        
        setVerificationStatus({
          isVerified: verification.status === 'approved',
          status: verification.status === 'approved' ? 'full' : 'none',
          message: verification.message
        })
      } else {
        setVerificationStatus({
          isVerified: false,
          status: 'none',
          message: 'Ïù∏Ï¶ù Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§'
        })
      }
    } catch (error) {
      console.error('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error)
      setVerificationStatus({
        isVerified: false,
        status: 'none',
        message: 'Ïù∏Ï¶ù ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§'
      })
    }
  }

  useEffect(() => {
    const checkAuthStatus = async () => {
      if (!user) {
        setAuthStatus({ loading: false, smsVerified: false })
        return
      }
        
      // Ïã§Ï†ú Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ (ÎÇòÏ§ëÏóê API Ïó∞Îèô)
      setAuthStatus({ loading: false, smsVerified: true })
    }

    checkAuthStatus()
    checkVerificationStatus()
  }, [user, token])

  // ÏïåÎ¶º ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleNotificationChange = (key: string, value: boolean) => {
    setNotificationSettings(prev => ({
      ...prev,
      [key]: value
    }))
  }

  // ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Ïä§ÏôÄÏù¥ÌîÑ Ìï∏Îì§Îü¨Îì§
  const handleTouchStart = (e: React.TouchEvent) => {
    setStartX(e.touches[0].clientX)
    setIsDragging(true)
  }

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (!isDragging) return
    
    const endX = e.changedTouches[0].clientX
    const diff = startX - endX
    const threshold = 50

    if (Math.abs(diff) > threshold) {
      if (diff > 0) {
        // ÏôºÏ™ΩÏúºÎ°ú Ïä§ÏôÄÏù¥ÌîÑ (Îã§Ïùå ÏÇ¨ÏßÑ)
        setCurrentImageIndex(prev => 
          prev < (profile?.profile_images?.length || 1) - 1 ? prev + 1 : 0
        )
      } else {
        // Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïä§ÏôÄÏù¥ÌîÑ (Ïù¥Ï†Ñ ÏÇ¨ÏßÑ)
        setCurrentImageIndex(prev => 
          prev > 0 ? prev - 1 : (profile?.profile_images?.length || 1) - 1
        )
      }
    }
    
    setIsDragging(false)
  }

  const handleMouseDown = (e: React.MouseEvent) => {
    setStartX(e.clientX)
    setIsDragging(true)
  }

  const handleMouseUp = (e: React.MouseEvent) => {
    if (!isDragging) return
    
    const endX = e.clientX
    const diff = startX - endX
    const threshold = 50

    if (Math.abs(diff) > threshold) {
      if (diff > 0) {
        // ÏôºÏ™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏ (Îã§Ïùå ÏÇ¨ÏßÑ)
        setCurrentImageIndex(prev => 
          prev < (profile?.profile_images?.length || 1) - 1 ? prev + 1 : 0
        )
      } else {
        // Ïò§Î•∏Ï™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏ (Ïù¥Ï†Ñ ÏÇ¨ÏßÑ)
        setCurrentImageIndex(prev => 
          prev > 0 ? prev - 1 : (profile?.profile_images?.length || 1) - 1
        )
      }
    }
    
    setIsDragging(false)
  }

  const handleMouseLeave = () => {
    setIsDragging(false)
  }

  // Í¥ÄÎ¶¨Ïûê Ïó¨Î∂Ä ÌôïÏù∏
  const isAdmin = user?.email === 'admin@amiko.com'

  if (loading) {
    return <ProfileSkeleton />
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
          <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">{t('myTab.loading')}</p>
        </div>
      </div>
    )
  }

  // ÌîÑÎ°úÌïÑÏù¥ ÏóÜÏùÑ ÎïåÏùò ÏÉÅÌÉú
  if (!profile) {
    return (
      <div className="min-h-screen bg-white">
        <div className="w-full">
          {/* Îπà ÌîÑÎ°úÌïÑ ÏÉÅÌÉú */}
          <div className="relative h-80 bg-gray-100 flex items-center justify-center">
            <div className="text-center text-gray-500">
              <User className="w-16 h-16 mx-auto mb-4" />
              <h2 className="text-lg font-semibold mb-2">ÌîÑÎ°úÌïÑÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî</h2>
              <p className="text-sm">Ìé∏Ïßë Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÌîÑÎ°úÌïÑÏùÑ ÏôÑÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî</p>
            </div>
          </div>

          {/* Ìé∏Ïßë Î≤ÑÌäº (Î™®Î∞îÏùº) */}
          <div className="px-4 py-2 bg-white md:hidden">
            <div className="flex items-center justify-between">
              <h1 className="text-lg font-semibold text-gray-800">ÎÇ¥ ÌîÑÎ°úÌïÑ</h1>
              <button
                onClick={() => setIsEditing(true)}
                className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center shadow-sm text-white"
              >
                <Edit3 className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÑπÏÖò (Ìé∏Ïßë Î™®Îìú) */}
          <div className="px-4 py-4 bg-gray-50">
            <div className="flex items-center gap-2 mb-3">
              <User className="w-4 h-4 text-blue-500" />
              <h2 className="font-semibold text-gray-800">Í∏∞Î≥∏ Ï†ïÎ≥¥</h2>
            </div>
            <p className="text-gray-600 text-sm">ÌîÑÎ°úÌïÑÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî</p>
          </div>
        </div>
      </div>
    )
  }

  // Ìã¥Îçî Ïä§ÌÉÄÏùº Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ
  return (
    <div className="min-h-screen bg-white">
      {/* Ìã¥Îçî Ïä§ÌÉÄÏùº ÌíÄÏä§ÌÅ¨Î¶∞ Ïª®ÌÖåÏù¥ÎÑà */}
      <div className="w-full">
        
        {/* ÌîÑÎ°úÌïÑ Ìó§Îçî ÏÑπÏÖò - Ïù∏Ïä§ÌÉÄ Ïä§ÌÜ†Î¶¨ Ïä§ÌÉÄÏùº */}
            <div className="relative">
          {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Ïä§ÏôÄÏù¥ÌîÑ ÏòÅÏó≠ */}
          <div 
            className="relative h-80 bg-gray-100 overflow-hidden cursor-grab active:cursor-grabbing select-none"
            onTouchStart={handleTouchStart}
            onTouchEnd={handleTouchEnd}
            onMouseDown={handleMouseDown}
            onMouseUp={handleMouseUp}
            onMouseLeave={handleMouseLeave}
          >
                 {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÎì§ */}
                 <div
                   className="flex h-full transition-transform duration-300 ease-in-out"
                   style={{
                     transform: `translateX(-${currentImageIndex * 100}%)`,
                     userSelect: 'none',
                     WebkitUserSelect: 'none'
                   }}
                 >
                   {profile?.profile_images?.length > 0 ? (
                     profile.profile_images.map((imageSrc: string, index: number) => (
                       <div key={index} className="w-full h-full flex-shrink-0 relative">
                         <img
                           src={imageSrc}
                           alt={`ÌîÑÎ°úÌïÑ ${index + 1}`}
                           className="w-full h-full object-cover"
                           draggable={false}
                           onDragStart={(e) => e.preventDefault()}
                         />
                         {/* ÏÇ¨ÏßÑ Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
                         <div className="absolute top-4 right-4 bg-black/50 text-white px-2 py-1 rounded-full text-xs">
                           {index + 1}/{profile.profile_images.length}
                         </div>
                       </div>
                     ))
                   ) : (
                     <div className="w-full h-full flex-shrink-0 relative bg-gray-200 flex items-center justify-center">
                       <div className="text-center text-gray-500">
                         <Camera className="w-16 h-16 mx-auto mb-2" />
                         <p className="text-sm">ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî</p>
                       </div>
                     </div>
                   )}
                 </div>
              
            {/* ÌïòÎã® Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ Ï†êÎì§ */}
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
              {profile?.profile_images?.length > 0 ? (
                profile.profile_images.map((_, index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index === currentImageIndex ? 'bg-white' : 'bg-white/50'
                    }`}
                  />
                ))
              ) : null}
            </div>

            {/* Ïπ¥Î©îÎùº Î≤ÑÌäº */}
            <button className="absolute bottom-4 right-4 w-12 h-12 bg-white rounded-full flex items-center justify-center shadow-lg">
              <Camera className="w-6 h-6 text-gray-600" />
                      </button>
            
            {/* Ïä§ÏôÄÏù¥ÌîÑ ÌûåÌä∏ (ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏù¥ Ïó¨Îü¨ Ïû• ÏûàÏùÑ ÎïåÎßå ÌëúÏãú) */}
            {profile?.profile_images?.length > 1 && currentImageIndex === 0 && (
              <div className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-3 py-1 rounded-full text-xs animate-pulse">
                ‚Üê Ïä§ÏôÄÏù¥ÌîÑÌï¥ÏÑú Îçî Î≥¥Í∏∞ ‚Üí
              </div>
            )}
                    </div>

          {/* ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ */}
          <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4">
            <div className="flex items-end justify-between">
              <div className="flex-1">
                <h1 className="text-2xl font-bold text-white">
                  {profile?.full_name || profile?.name || 'ÌîÑÎ°úÌïÑÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî'}
                </h1>
                <p className="text-white/90 text-sm">
                  {profile?.user_type === 'student' || profile?.userType === 'student'
                    ? `${profile?.university || ''} ${profile?.major || ''} ${profile?.grade || ''}`.trim() || 'ÌïôÏÉù'
                    : profile?.occupation || 'ÏßÅÏû•Ïù∏'
                  }
                </p>
                <p className="text-white/80 text-xs mt-1">
                  Í∞ÄÏûÖÏùº: {profile?.join_date || profile?.joinDate || new Date().toISOString().split('T')[0]}
                </p>
              </div>
              
              {/* Ïù∏Ï¶ù ÏÉÅÌÉú Î∞è Ïù∏Ï¶ùÏÑºÌÑ∞ Î≤ÑÌäº */}
              <div className="flex flex-col items-end gap-2">
                {/* Ïù∏Ï¶ù ÏÉÅÌÉú ÌëúÏãú */}
                <div className="flex items-center gap-1">
                  {verificationStatus.isVerified ? (
                    <>
                      <CheckCircle className="w-4 h-4 text-green-400" />
                      <span className="text-green-400 text-xs">Ïù∏Ï¶ùÏôÑÎ£å</span>
                    </>
                  ) : (
                    <>
                      <AlertCircle className="w-4 h-4 text-yellow-400" />
                      <span className="text-yellow-400 text-xs">Ïù∏Ï¶ùÌïÑÏöî</span>
                    </>
                  )}
                </div>
                
                {/* Ïù∏Ï¶ùÏÑºÌÑ∞ Î≤ÑÌäº */}
                <Button
                  onClick={() => router.push('/verification-center')}
                  size="sm"
                  className={`text-xs px-3 py-1 h-7 ${
                    verificationStatus.isVerified 
                      ? 'bg-green-600 hover:bg-green-700' 
                      : 'bg-yellow-600 hover:bg-yellow-700'
                  }`}
                >
                  <Shield className="w-3 h-3 mr-1" />
                  {verificationStatus.isVerified ? 'Ïù∏Ï¶ùÏÑºÌÑ∞' : 'Ïù∏Ï¶ùÌïòÍ∏∞'}
                </Button>
              </div>
            </div>
          </div>

             {/* Ìé∏Ïßë Î≤ÑÌäº (Î™®Î∞îÏùº) */}
             <div className="px-4 py-2 bg-white md:hidden">
               <div className="flex items-center justify-between">
                 <h1 className="text-lg font-semibold text-gray-800">ÎÇ¥ ÌîÑÎ°úÌïÑ</h1>
                 <div className="flex items-center gap-2">
                {isEditing ? (
                  <>
                       <button
                         onClick={() => setIsEditing(false)}
                         className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center shadow-sm border border-gray-200"
                       >
                         <X className="w-4 h-4 text-gray-600" />
                       </button>
                       <button
                      onClick={handleSaveProfile}
                         disabled={isSaving}
                         className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center shadow-sm text-white"
                       >
                         {isSaving ? (
                           <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                         ) : (
                           <Save className="w-4 h-4" />
                         )}
                       </button>
                  </>
                ) : (
                     <button
                    onClick={() => setIsEditing(true)}
                       className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center shadow-sm border border-gray-200"
                  >
                       <Edit3 className="w-4 h-4 text-gray-600" />
                     </button>
                )}
              </div>
              </div>
            </div>

        {/* Í¥ÄÏã¨ÏÇ¨ ÏÑπÏÖò */}
        <div className="px-4 py-4 bg-gray-50">
          <div className="flex items-center gap-2 mb-3">
            <Heart className="w-4 h-4 text-pink-500" />
            <h2 className="font-semibold text-gray-800">Í¥ÄÏã¨ÏÇ¨</h2>
          </div>

          {isEditing ? (
            <div className="space-y-3">
              {/* Í∏∞Ï°¥ Í¥ÄÏã¨ÏÇ¨ ÌëúÏãú */}
              <div className="flex flex-wrap gap-2">
                {editForm.interests.map((interest: string, index: number) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-white text-gray-700 rounded-full text-sm border border-gray-200 flex items-center gap-1"
                  >
                    {interest}
                    <button
                      onClick={() => handleRemoveInterest(interest)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                ))}
              </div>

              {/* ÏÉà Í¥ÄÏã¨ÏÇ¨ Ï∂îÍ∞Ä */}
              <div className="flex gap-2">
                <Input
                  value={newInterest}
                  onChange={(e) => setNewInterest(e.target.value)}
                  placeholder="Í¥ÄÏã¨ÏÇ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="text-sm"
                  onKeyPress={(e) => e.key === 'Enter' && handleAddInterest()}
                />
                <Button
                  onClick={handleAddInterest}
                  size="sm"
                  className="px-3"
                >
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex flex-wrap gap-2">
              {profile?.interests?.length > 0 ? (
                profile.interests.map((interest: string, index: number) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-white text-gray-700 rounded-full text-sm border border-gray-200"
                  >
                    {interest}
                  </span>
                ))
              ) : (
                <span className="px-3 py-1 bg-white text-gray-500 rounded-full text-sm border border-gray-200">
                  Í¥ÄÏã¨ÏÇ¨ ÏóÜÏùå
                </span>
              )}
            </div>
          )}
        </div>
                  
        {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÑπÏÖò */}
        <div className="px-4 py-4 bg-gray-50">
          <div className="flex items-center gap-2 mb-3">
            <User className="w-4 h-4 text-blue-500" />
            <h2 className="font-semibold text-gray-800">Í∏∞Î≥∏ Ï†ïÎ≥¥</h2>
          </div>

                {isEditing ? (
            <div className="space-y-4">
              {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏûÖÎ†• ÌïÑÎìúÎì§ */}
              <div className="grid grid-cols-1 gap-3">
                <div>
                  <label className="text-gray-600 text-sm block mb-1">ÌïúÍµ≠Ïù¥Î¶Ñ</label>
                  <Input
                    value={editForm.korean_name}
                    onChange={(e) => setEditForm(prev => ({ ...prev, korean_name: e.target.value }))}
                    placeholder="ÌïúÍµ≠Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    className="text-sm"
                  />
              </div>
              
                <div>
                  <label className="text-gray-600 text-sm block mb-1">ÎãâÎÑ§ÏûÑ</label>
                  <Input
                    value={editForm.nickname}
                    onChange={(e) => setEditForm(prev => ({ ...prev, nickname: e.target.value }))}
                    placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    className="text-sm"
                  />
              </div>

                <div>
                  <label className="text-gray-600 text-sm block mb-1">Ïä§ÌéòÏù∏Ïñ¥ Ïù¥Î¶Ñ</label>
                    <Input
                    value={editForm.spanish_name}
                    onChange={(e) => setEditForm(prev => ({ ...prev, spanish_name: e.target.value }))}
                    placeholder="Ïä§ÌéòÏù∏Ïñ¥ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    className="text-sm"
                  />
                  </div>
                
                <div>
                  <label className="text-gray-600 text-sm block mb-1">ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖ</label>
                  <Select value={editForm.user_type} onValueChange={(value) => setEditForm(prev => ({ ...prev, user_type: value }))}>
                    <SelectTrigger className="text-sm">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="student">ÌïôÏÉù</SelectItem>
                      <SelectItem value="worker">ÏßÅÏû•Ïù∏</SelectItem>
                    </SelectContent>
                  </Select>
              </div>
              
                {/* ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏûÖÎ†• ÌïÑÎìú */}
                {editForm.user_type === 'student' ? (
                <>
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">ÎåÄÌïôÍµê</label>
                      <Input
                        value={editForm.university}
                        onChange={(e) => setEditForm(prev => ({ ...prev, university: e.target.value }))}
                        placeholder="ÎåÄÌïôÍµêÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                  </div>
                  
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">Ï†ÑÍ≥µ</label>
                      <Input
                        value={editForm.major}
                        onChange={(e) => setEditForm(prev => ({ ...prev, major: e.target.value }))}
                        placeholder="Ï†ÑÍ≥µÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                  </div>
                    
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">ÌïôÎÖÑ</label>
                      <Input
                        value={editForm.grade}
                        onChange={(e) => setEditForm(prev => ({ ...prev, grade: e.target.value }))}
                        placeholder="ÌïôÎÖÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">ÏßÅÏóÖ</label>
                      <Input
                        value={editForm.occupation}
                        onChange={(e) => setEditForm(prev => ({ ...prev, occupation: e.target.value }))}
                        placeholder="ÏßÅÏóÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                  </div>
                  
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">ÌöåÏÇ¨</label>
                      <Input
                        value={editForm.company}
                        onChange={(e) => setEditForm(prev => ({ ...prev, company: e.target.value }))}
                        placeholder="ÌöåÏÇ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                  </div>
                    
                    <div>
                      <label className="text-gray-600 text-sm block mb-1">Í≤ΩÎ†•</label>
                    <Input
                        value={editForm.career}
                        onChange={(e) => setEditForm(prev => ({ ...prev, career: e.target.value }))}
                        placeholder="Í≤ΩÎ†•ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        className="text-sm"
                      />
                </div>
                  </>
                )}
                
                <div>
                  <label className="text-gray-600 text-sm block mb-1">ÏûêÍ∏∞ÏÜåÍ∞ú</label>
                <Textarea
                    value={editForm.introduction}
                    onChange={(e) => setEditForm(prev => ({ ...prev, introduction: e.target.value }))}
                    placeholder="ÏûêÍ∏∞ÏÜåÍ∞úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    className="text-sm min-h-[80px]"
                  />
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-3">
              {/* ÌïúÍµ≠Ïù¥Î¶Ñ */}
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">ÌïúÍµ≠Ïù¥Î¶Ñ</span>
                <span className="text-gray-800 text-sm font-medium">
                  {profile?.korean_name || 'ÌïúÍµ≠Ïù¥Î¶Ñ ÏóÜÏùå'}
                </span>
            </div>

              {/* Íµ¨Î∂ÑÏÑ† */}
              <div className="border-t border-gray-200"></div>

              {/* ÎãâÎÑ§ÏûÑ */}
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">ÎãâÎÑ§ÏûÑ (ÏïåÌååÎ≤≥, Ïà´Ïûê, ÌäπÏàòÎ¨∏Ïûê)</span>
                <span className="text-gray-800 text-sm font-medium">
                  {profile?.nickname || 'ÎãâÎÑ§ÏûÑ ÎØ∏ÏÑ§Ï†ï'}
                </span>
                </div>

              {/* Íµ¨Î∂ÑÏÑ† */}
              <div className="border-t border-gray-200"></div>

              {/* Ïä§ÌéòÏù∏Ïñ¥ Ïù¥Î¶Ñ */}
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">Ïä§ÌéòÏù∏Ïñ¥ Ïù¥Î¶Ñ</span>
                <span className="text-gray-800 text-sm font-medium">
                  {profile?.spanish_name || 'Ïä§ÌéòÏù∏Ïñ¥ Ïù¥Î¶Ñ ÏóÜÏùå'}
                </span>
              </div>

              {/* Íµ¨Î∂ÑÏÑ† */}
              <div className="border-t border-gray-200"></div>

              {/* ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÏóê Îî∞Î•∏ Ï†ïÎ≥¥ ÌëúÏãú */}
              {profile?.userType === 'student' || profile?.user_type === 'student' ? (
                <>
                  {/* ÌïôÎ†• Ï†ïÎ≥¥ (ÎåÄÌïôÏÉùÏù∏ Í≤ΩÏö∞) */}
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">ÎåÄÌïôÍµê</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.university || 'ÎåÄÌïôÍµê ÏóÜÏùå'}
                    </span>
                  </div>

                  {/* Íµ¨Î∂ÑÏÑ† */}
                  <div className="border-t border-gray-200"></div>

                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">Ï†ÑÍ≥µ</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.major || 'Ï†ÑÍ≥µ ÏóÜÏùå'}
                    </span>
                  </div>

                  {/* Íµ¨Î∂ÑÏÑ† */}
                  <div className="border-t border-gray-200"></div>

                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">ÌïôÎÖÑ</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.grade || 'ÌïôÎÖÑ ÏóÜÏùå'}
                    </span>
                  </div>
                </>
              ) : (
                <>
                  {/* ÏßÅÏóÖ Ï†ïÎ≥¥ (ÏßÅÏû•Ïù∏Ïù∏ Í≤ΩÏö∞) */}
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">ÏßÅÏóÖ</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.occupation || 'ÏßÅÏóÖ ÏóÜÏùå'}
                    </span>
                  </div>
            
                  {/* Íµ¨Î∂ÑÏÑ† */}
                  <div className="border-t border-gray-200"></div>

                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">ÌöåÏÇ¨</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.company || 'ÌöåÏÇ¨ ÏóÜÏùå'}
                    </span>
                  </div>

                  {/* Íµ¨Î∂ÑÏÑ† */}
                  <div className="border-t border-gray-200"></div>

                  <div className="flex items-center justify-between">
                    <span className="text-gray-600 text-sm">Í≤ΩÎ†•</span>
                    <span className="text-gray-800 text-sm font-medium">
                      {profile?.career || 'Í≤ΩÎ†• ÏóÜÏùå'}
                    </span>
                  </div>
                </>
              )}

              {/* Íµ¨Î∂ÑÏÑ† */}
              <div className="border-t border-gray-200"></div>

              {/* ÏûêÍ∏∞ÏÜåÍ∞ú */}
              <div className="flex items-start justify-between">
                <span className="text-gray-600 text-sm">ÏûêÍ∏∞ÏÜåÍ∞ú</span>
                <span className="text-gray-800 text-sm font-medium text-right max-w-[60%]">
                  {profile?.introduction || 'ÏûêÍ∏∞ÏÜåÍ∞ú ÏóÜÏùå'}
                </span>
              </div>
        </div>
      )}
        </div>


            
        {/* Ïä§ÌÜ†Î¶¨ ÏÑ§Ï†ï ÏÑπÏÖò */}
        <div className="px-4 py-4 bg-white">
          <div className="flex items-center gap-2 mb-3">
            <Settings className="w-4 h-4 text-orange-500" />
            <h2 className="font-semibold text-gray-800">{t('storySettings.globalSettings.title')}</h2>
          </div>
          <StorySettings />
        </div>
            
        {/* ÏïåÎ¶º ÏÑ§Ï†ï ÏÑπÏÖò */}
        <div className="px-4 py-4 bg-gray-50">
          <div className="flex items-center gap-2 mb-3">
            <Bell className="w-4 h-4 text-blue-500" />
            <h2 className="font-semibold text-gray-800">{t('myTab.notificationSettings')}</h2>
        </div>
        
            <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Bell className="w-4 h-4 text-purple-600" />
              <div>
                  <div className="font-medium text-gray-800 text-xs">{t('myTab.webPushNotification')}</div>
                  <div className="text-xs text-gray-600">{t('myTab.webPushDescription')}</div>
              </div>
            </div>
            <Switch
              checked={notificationSettings.webPush}
              onCheckedChange={(checked) => handleNotificationChange('webPush', checked)}
            />
          </div>
          
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Mail className="w-4 h-4 text-purple-600" />
              <div>
                  <div className="font-medium text-gray-800 text-xs">{t('myTab.emailNotification')}</div>
                  <div className="text-xs text-gray-600">{t('myTab.emailDescription')}</div>
              </div>
            </div>
            <Switch
              checked={notificationSettings.email}
              onCheckedChange={(checked) => handleNotificationChange('email', checked)}
            />
          </div>
          
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <MessageSquare className="w-4 h-4 text-purple-600" />
              <div>
                  <div className="font-medium text-gray-800 text-xs">{t('myTab.marketingNotification')}</div>
                  <div className="text-xs text-gray-600">{t('myTab.marketingDescription')}</div>
              </div>
            </div>
            <Switch
              checked={notificationSettings.marketing}
              onCheckedChange={(checked) => handleNotificationChange('marketing', checked)}
            />
          </div>
        </div>
      </div>

        {/* ÌïòÎã® Ïó¨Î∞± */}
        <div className="h-20"></div>
        
      </div>
    </div>
  )
}